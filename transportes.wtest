import camion.*
import cosas.*

describe "carga y descarga de cosas en el camion" {
  method initialize() {
    camion.cosas().clear()
    console.println("ejecutado")
  }
  
  test "camion descargado, carga y descarga cosas" {
    assert.that(camion.cosas().isEmpty())
    camion.cargar(bumblebee)
    assert.that(
      (camion.cosas().size() == 1) and camion.cosas().contains(bumblebee)
    )
    camion.cargar(knightRider)
    assert.that(
      ((camion.cosas().size() == 2) and camion.cosas().contains(
        bumblebee
      )) and camion.cosas().contains(knightRider)
    )
    camion.descarga(bumblebee)
    assert.that(
      (camion.cosas().size() == 1) and camion.cosas().contains(knightRider)
    )
    camion.cargar(knightRider)
    assert.that(
      (camion.cosas().size() == 1) and camion.cosas().contains(knightRider)
    )
    camion.descarga(bumblebee)
  }
  
  test "Camion con carga de 2 cosas con peso par" {
    camion.cargar(bumblebee)
    arenaAGranel.peso(50)
    camion.cargar(arenaAGranel)
    assert.that(camion.todaCargaEsPar())
  }
  
  test "Camion con carga de 1 peso par y otro impar" {
    camion.cargar(bumblebee)
    arenaAGranel.peso(51)
    camion.cargar(arenaAGranel)
    assert.notThat(camion.todaCargaEsPar())
  }
}

describe "peso de la carga del camion con bumblebee y arena a granel(50kg)" {
  method initialize() {
    camion.cosas().clear()
    console.println("ejecutado")
    camion.cargar(bumblebee)
    arenaAGranel.peso(50)
    camion.cargar(arenaAGranel)
  }
  
  test "Algo que pesa 50" {
    assert.that(camion.cargaConPesoIgualA(50))
  }
  
  test "Algo que pesa 800" {
    assert.that(camion.cargaConPesoIgualA(800))
  }
  
  test "Algo que pesa 500" {
    assert.notThat(camion.cargaConPesoIgualA(500))
  }
}

describe "peso total del camion y exceso de peso" {
  method initialize() {
    camion.cosas().clear()
    console.println("ejecutado")
    camion.cargar(bumblebee)
  }
  
  test "peso total con bumblebee y 300 ladrillos-> no excede" {
    paqueteLadrillos.cantidadLadrillos(300) //20kg
    camion.cargar(paqueteLadrillos)
    assert.equals(camion.pesoTotal(), 2400)
    assert.notThat(camion.cargaExcedidaDePeso())
  }
  
  test "peso total con bumblebee y 400 ladrillos-> excede" {
    paqueteLadrillos.cantidadLadrillos(400) //20kg
    camion.cargar(paqueteLadrillos)
    assert.equals(camion.pesoTotal(), 2600)
    assert.that(camion.cargaExcedidaDePeso())
  }
}

describe "El de nivel de peligrosidad" {
  method initialize() {
    camion.cosas().clear()
    bumblebee.transformacion(auto)
    camion.cargar(bumblebee)
    bateriaAntiaerea.tieneMisiles(false)
    camion.cargar(bateriaAntiaerea)
    camion.cargar(residuosRadiactivos)
  }
  
  test "algo de nivel 0 -> bateria" {
    assert.that(camion.cargaConPeligrosidadDe(0).size() == 1)
    assert.that(camion.cargaConPeligrosidadDe(0).contains(bateriaAntiaerea))   
  }
  
  test "algo de nivel 15 -> bumblebee" {
    assert.that(camion.cargaConPeligrosidadDe(15).size() == 1)
    assert.that(camion.cargaConPeligrosidadDe(15).contains(bumblebee))   
  }
  
  test "algo de nivel 200 -> residuos" {
    assert.that(camion.cargaConPeligrosidadDe(200).size() == 1)
    assert.that(camion.cargaConPeligrosidadDe(200).contains(residuosRadiactivos))   
  }
  
  test "algo de nivel 30 -> romper" {
    assert.that(camion.cargaConPeligrosidadDe(30).isEmpty())
  }

  test "bumblebbe modo robot" {
    bumblebee.transformacion(robot)
    assert.that(camion.cargaConPeligrosidadDe(30).contains(bumblebee))   
  }

  test "bateria con misiles = carga con peligrosidad 100" {
    bateriaAntiaerea.tieneMisiles(true)
    assert.that(camion.cargaConPeligrosidadDe(100).contains(bateriaAntiaerea))
  }
}

describe "cosas peligrosas" {

  method initialize() {
    camion.cosas().clear()
    camion.cargar(knightRider) //15
    camion.cargar(bateriaAntiaerea) //15
    bateriaAntiaerea.tieneMisiles(true)
  }
  test "cosas que superan un nivel de peligrosidad" {
    assert.that(camion.cargaConPeligrosidadMayorA(15).contains(bateriaAntiaerea))
    assert.that(camion.cargaConPeligrosidadMayorA(2).contains(knightRider) && camion.cargaConPeligrosidadMayorA(2).contains(bateriaAntiaerea))
    assert.that(camion.cargaConPeligrosidadMayorA(200).isEmpty())
  }

  test "cosas que superan el peso de otra cosa" {
    assert.that(camion.cargaConPeligrosidadMayorAlPesoDe(bumblebee).contains(bateriaAntiaerea))
    assert.that(camion.cargaConPeligrosidadMayorAlPesoDe(paqueteLadrillos).contains(knightRider) && camion.cargaConPeligrosidadMayorAlPesoDe(paqueteLadrillos).contains(bateriaAntiaerea))
    assert.that(camion.cargaConPeligrosidadMayorAlPesoDe(residuosRadiactivos).isEmpty())
    
  }
}